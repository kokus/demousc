services:
  php:
    image: tugboatqa/php:8.2-apache

    default: true

    urls:
      - url: /
        visualdiff:
          threshold: 90

    # Wait until the mysql service is done building
    depends: mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        # Install and enable php-redis extension
        - wget https://github.com/FriendsOfPHP/pickle/releases/latest/download/pickle.phar -P /usr/bin
        - chmod +x /usr/bin/pickle.phar
        - pickle.phar install redis
        - docker-php-ext-enable redis

        # Install opcache and mod-rewrite.
        - docker-php-ext-install opcache
        - a2enmod headers rewrite

        # Link the document root to the expected path. This example links /web
        # to the docroot.
        - ln -snf "${TUGBOAT_ROOT}/web" "${DOCROOT}"

        # Create the Drupal private files and config directories if they aren't
        # already present.
        - mkdir -p "${TUGBOAT_ROOT}/files-private"

        # Increase the php memory limit to 512MB.
        - echo "memory_limit = 512M" >> /usr/local/etc/php/conf.d/tugboat.ini
        # Install node.
        - apt-get update
        - apt-get install -yq ca-certificates curl gnupg
        - mkdir -p /etc/apt/keyrings
        - curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
        - echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
        - apt-get update
        - apt-get install -yq nodejs

        # Use the tugboat-specific Drupal settings.
        - rm -rf "${DOCROOT}/sites/default/settings.db.php"
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/settings.db.php"

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Set file permissions such that Drupal will not complain
        - chgrp -R www-data "${DOCROOT}/sites"
        - find "${DOCROOT}/sites" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites" -type f -exec chmod 0664 {} \;

      build:
        # Install/update packages managed by composer, including drush.
        - composer install --optimize-autoloader
        # Use the tugboat-specific Drupal settings.
        - rm -rf "${DOCROOT}/sites/default/settings.db.php"
        - cp "${TUGBOAT_ROOT}/.tugboat/settings.local.php" "${DOCROOT}/sites/default/settings.db.php"
        - vendor/bin/drush deploy -vvv
        # Compile theme.
        - cd web/themes/custom/uscgov/ && npm install && npx gulp init

  # This 'mysql' key acts as the hostname to access the service by from the php service.
  mysql:
    image: tugboatqa/mysql:8.0

    # A set of commands to run while building this service
    commands:
      # Configure the server for the site to run on.
      init:
        # Increase the allowed packet size to 512MB.
        - mysql -e "SET GLOBAL max_allowed_packet=536870912;"
        # Ensure this packet size persists even if MySQL restarts.
        - echo "max_allowed_packet=536870912" >> /etc/mysql/conf.d/tugboat.cnf

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        - scp agileana@170.187.136.164:dbs_tugboat/uscgov.sql.gz /tmp/database.sql.gz
        - zcat /tmp/database.sql.gz | mysql tugboat
        - rm /tmp/database.sql.gz

  redis:
    image: tugboatqa/redis:6.2
