<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\config_pages\Entity\ConfigPages;
use Drupal\Core\Cache\CacheableMetadata;

/**
 * Implements hook_preprocess_image_widget().
 */
function uscgov_preprocess_image_widget(array &$variables) {
  $data = &$variables['data'];

  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}

/**
 * Implements hook_preprocess_pager().
 */
function uscgov_preprocess_pager(array &$variables) {
  if (!isset($variables['items'])) {
    return;
  }
  $element = $variables['pager']['#element'];
  /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
  $pager_manager = \Drupal::service('pager.manager');
  $pager = $pager_manager->getPager($element);
  $variables['last_page'] = $pager->getTotalPages();
  $variables['items']['first']['visible'] = _is_page_link_visible($variables['current'], $variables['pager']['#quantity'], 1);
  $variables['items']['last']['visible'] = _is_page_link_visible($variables['current'], $variables['pager']['#quantity'], $variables['last_page']);
}

/**
 * Calculates if an page link is visible in the pagination items.
 *
 * That is needed in USWDS to know when to show the first and last item.
 *
 * @param int $current_page
 *   The current page.
 * @param int $total_visible_links
 *   The total visible items.
 * @param int $page_to_check
 *   The page to verify if it is visible.
 *
 * @return bool
 *   TRUE is page is visible, FALSE otherwise.
 *
 * @see https://designsystem.digital.gov/components/pagination/#using-the-pagination-component-2
 */
function _is_page_link_visible($current_page, $total_visible_links, $page_to_check) {
  // Calculate the half of totalVisibleLinks (assuming it's an odd number).
  $half_visible_links = ($total_visible_links - 1) / 2;

  // Calculate the minimum and maximum visible page numbers around the current page.
  $min_visible_page = $current_page - $half_visible_links;
  $max_visible_page = $current_page + $half_visible_links;

  // Adjust the range if the totalVisibleLinks is even.
  if ($total_visible_links % 2 == 0) {
    $max_visible_page += 1;
  }

  // Check if the page_to_check falls within the visible range.
  return $min_visible_page <= $page_to_check && $page_to_check <= $max_visible_page;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function uscgov_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_form';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function uscgov_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'tabs__link';
  $variables['link']['#options']['attributes']['class'][] = 'js-tabs-link';

  // Ensure is-active class is set when the tab is active. The generic active
  // link handler applies stricter comparison rules than what is necessary for
  // tabs.
  if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'is-active';
  }

  if (isset($variables['element']['#level'])) {
    $variables['level'] = $variables['element']['#level'];
  }
}

/**
 * Implements hook_preprocess_HOOK() for the config pages social media fields.
 *
 * This creates a 'social_media' array that's used by the social media
 * menu component.
 *
 * @throws Drupal\Core\File\Exception\InvalidStreamWrapperException
 */
function uscgov_preprocess_field__config_pages__field_social_media(&$variables) {
  foreach ($variables['items'] as &$item) {
    $variables['social_media'][] = [
      'url' => $item['content']['#paragraph']->field_hyperlink->uri,
      'title' => $item['content']['#paragraph']->field_social_media_name->value,
      'path_to_logo' => \Drupal::service('file_url_generator')->generateString($item['content']['#paragraph']->field_svg_icon->entity->uri->value),
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Adds cache dependency for page settings(config page).
 */
function uscgov_preprocess_page(array &$variables) {
  $global_site_settings = ConfigPages::config('global_site_settings');
  // Add a cache dependency.
  CacheableMetadata::createFromObject($global_site_settings)->applyTo($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Creates a quicklinks array to pass to SDC component.
 *
 * @throws \Exception
 */
function uscgov_preprocess_field__config_pages__field_hompage_quick_links(array &$variables) {
  foreach ($variables['items'] as &$item) {
    if ($item['content']['#paragraph']->field_icon_link_link->first()) {
      $variables['quicklinks'][] = [
        'url' => $item['content']['#paragraph']->field_icon_link_link->first()->getUrl(),
        'title' => $item['content']['#paragraph']->field_icon_link_link->title,
        'svg_path' => \Drupal::service('file_url_generator')->generateString($item['content']['#paragraph']->field_icon->entity->field_media_file_1->entity->uri->value),
      ];
    }
  }
}
